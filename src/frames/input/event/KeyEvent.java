/****************************************************************************************
 * frames
 * Copyright (c) 2018 National University of Colombia, https://visualcomputing.github.io/
 * @author Jean Pierre Charalambos, https://github.com/VisualComputing
 *
 * All rights reserved. A 2D or 3D scene graph library providing eye, input and timing
 * handling to a third party (real or non-real time) renderer. Released under the terms
 * of the GPL v3.0 which is available at http://www.gnu.org/licenses/gpl.html
 ****************************************************************************************/

package frames.input.event;

import frames.input.Event;

/**
 * A key-event is an {@link Event} specialization that
 * encapsulates a {@link KeyShortcut}. Key shortcuts may be
 * of one form out of two: 1. A single Character; or, 2. A modifier mask (such as: (ALT |
 * SHIFT)) plus a virtual-key.
 *
 * <b>Note</b> that virtual key codes are used to report which keys have been
 * pressed, rather than a character generated by the combination of one or more keystrokes
 * (such as "A", which comes from shift and "a"). Their values depend on the platform your
 * running your code. In Java, for instance, have a look at
 * <a href= "http://docs.oracle.com/javase/7/docs/api/java/awt/event/KeyEvent.html">
 * KeyEvent</a> to get some VK_* values. Note that Proscene sets them automatically from
 * the platform where the framework is running.
 */
public class KeyEvent extends Event {
  protected char _key;

  /**
   * Constructs a keyevent with the <b>modifiers</b> and <b>vk</b> defining its
   * {@link KeyShortcut}.
   */
  public KeyEvent(int modifiers, int virtualKey) {
    super(modifiers, virtualKey);
    _key = '\0';
  }

  /**
   * Constructs a keyevent with <b>c</b> defining its
   * {@link KeyShortcut}.
   */
  public KeyEvent(int virtualKey) {
    super(NO_MODIFIER_MASK, virtualKey);
    _key = '\0';
  }

  public KeyEvent(char _key) {
    super();
    this._key = _key;
  }

  /**
   * @param other
   */
  protected KeyEvent(KeyEvent other) {
    super(other);
    this._key = other._key;
  }

  @Override
  public KeyEvent get() {
    return new KeyEvent(this);
  }

  @Override
  public KeyEvent flush() {
    return (KeyEvent) super.flush();
  }

  @Override
  public KeyEvent fire() {
    return (KeyEvent) super.fire();
  }

  @Override
  public KeyShortcut shortcut() {
    if (_key == '\0')
      return new KeyShortcut(modifiers(), id());
    else
      return new KeyShortcut(key());
  }

  public char key() {
    return _key;
  }
}
